# -*- coding: utf-8 -*-
"""AI detection People.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IP_oOk7HPx4msnCK6oWgBhg99pjYjWvg
"""

#Setup libraries
!pip install firebase-admin opencv-python-headless ultralytics roboflow supervision
!pip install requests pillow matplotlib numpy

"""After setup libraries import and config the libraries + configuration of the FIREBASE url"""

import firebase_admin
from firebase_admin import credentials, db
import requests
import base64
import cv2
import numpy as np
from PIL import Image
import matplotlib.pyplot as plt
from ultralytics import YOLO
import json
from datetime import datetime
import time

# Configurazione Firebase
FIREBASE_URL = "https://esp32device-2fe39-default-rtdb.asia-southeast1.firebasedatabase.app"

"""Starting with the code"""

def connect_firebase():
    """Connection to Firabase..."""
    try:
        print("Connected to Firebase")
        return True
    except Exception as e:
        print(f"Error in firebase connection: {e}")
        return False

def get_images_from_firebase():
    """Download all images on firebase"""
    try:
        url = f"{FIREBASE_URL}/esp32-camera/images.json"
        response = requests.get(url)

        if response.status_code == 200:
            images_data = response.json()
            if images_data:
                print(f"Found {len(images_data)} images")
                return images_data
            else:
                print("No images found")
                return None
        else:
            print(f"HTTP Error: {response.status_code}")
            return None

    except Exception as e:
        print(f"Download error: {e}")
        return None

def get_latest_image():
    """Catch only last image"""
    images_data = get_images_from_firebase()
    if images_data:
        latest_key = max(images_data.keys(), key=lambda x: images_data[x]['timestamp'])
        return {latest_key: images_data[latest_key]}
    return None

"""Processing images function"""

def base64_to_image(base64_string):
    """Convert Base64 image to OpenCV"""
    try:
        image_data = base64.b64decode(base64_string)
        nparr = np.frombuffer(image_data, np.uint8)
        image = cv2.imdecode(nparr, cv2.IMREAD_COLOR)
        image_rgb = cv2.cvtColor(image, cv2.COLOR_BGR2RGB)
        return image_rgb
    except Exception as e:
        print(f"Error in convertion the image: {e}")
        return None

def display_image(image, title="ESP32 Camera Image"):
    """See the image with matlib"""
    plt.figure(figsize=(12, 8))
    plt.imshow(image)
    plt.title(title)
    plt.axis('off')
    plt.show()

"""AI detection"""

def load_yolo_model():
    """Load the YOLO model"""
    try:
        model = YOLO('yolov8n.pt')
        print("Model uploaded")
        return model
    except Exception as e:
        print(f"Error in uploading the model: {e}")
        return None

def detect_persons(model, image):
    """Detect people in the images"""
    try:
        results = model(image)
        persons_detected = []

        for result in results:
            boxes = result.boxes
            if boxes is not None:
                for box in boxes:
                    if int(box.cls[0]) == 0:  # person class
                        confidence = float(box.conf[0])
                        if confidence > 0.5:
                            x1, y1, x2, y2 = box.xyxy[0].cpu().numpy()
                            persons_detected.append({
                                'confidence': confidence,
                                'bbox': [int(x1), int(y1), int(x2), int(y2)]
                            })

        return persons_detected
    except Exception as e:
        print(f"Error in detection: {e}")
        return []

def draw_detections(image, detections):
    """Drawing bownding box from the people"""
    result_image = image.copy()

    for detection in detections:
        bbox = detection['bbox']
        confidence = detection['confidence']

        cv2.rectangle(result_image,
                     (bbox[0], bbox[1]),
                     (bbox[2], bbox[3]),
                     (0, 255, 0), 3)

        label = f"Person: {confidence:.2f}"
        cv2.putText(result_image, label,
                   (bbox[0], bbox[1]-10),
                   cv2.FONT_HERSHEY_SIMPLEX,
                   0.7, (0, 255, 0), 2)

    return result_image

"""Main functions"""

def process_latest_image():
    """Process only last image"""
    print("AI activation...")

    if not connect_firebase():
        return

    model = load_yolo_model()
    if model is None:
        return

    print("\nDownload last image...")
    latest_image_data = get_latest_image()

    if not latest_image_data:
        print("No image avaiable")
        return

    for image_key, image_data in latest_image_data.items():
        print(f"\nProcessing the image {image_key}...")

        image = base64_to_image(image_data['image_data'])
        if image is None:
            continue

        print("Origina image:")
        display_image(image, f"ESP32 Image - {image_key}")

        print("Detecting...")
        detections = detect_persons(model, image)

        print(f"Found {len(detections)} people!")

        if detections:
            result_image = draw_detections(image, detections)
            display_image(result_image, f"People found: {len(detections)}")

            for i, detection in enumerate(detections):
                conf = detection['confidence']
                bbox = detection['bbox']
                print(f"  People {i+1}: Confidence {conf:.2f}, Position {bbox}")
        else:
            print("No people found")

print("Setup complete...")

# Testa il sistema con l'ultima immagine
process_latest_image()